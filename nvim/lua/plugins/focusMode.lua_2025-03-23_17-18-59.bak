local vim = vim
vim.g.focusMode = false
local FocusWindows = {}
local Flags = {}

function FocusModeRun()
	if Flags.run or Flags.stop or Flags.update or Flags.scheduledRunning then
		print("Something has gone wrong")
		return
	end

	Flags.run = true
	print("Entering focus mode")

	FocusWindows.current_win = vim.api.nvim_get_current_win()
	FocusWindows.current_buf = vim.api.nvim_get_current_buf()

	-- Close other windows only if there is more than one window
	local windows = vim.api.nvim_list_wins()
	if #windows > 1 then
		for _, win in ipairs(windows) do
			if win ~= FocusWindows.current_win then
				if vim.api.nvim_win_is_valid(win) then
					vim.api.nvim_win_close(win, true)
				end
			end
		end
	end

	local EmptyBuffer = vim.api.nvim_create_buf(false, true)
	FocusWindows.EmptyBuffer = EmptyBuffer
	FocusWindows.marginLeft = vim.api.nvim_open_win(EmptyBuffer, false, { split = "left" })
	FocusWindows.marginRight = vim.api.nvim_open_win(EmptyBuffer, false, { split = "right" })

	for _, win in ipairs({ FocusWindows.marginLeft, FocusWindows.marginRight }) do
		vim.api.nvim_win_set_option(win, "number", false)
		vim.api.nvim_win_set_option(win, "relativenumber", false)
	end
	-- Optionally, you might want to save the original options to restore later
	vim.api.nvim_win_set_option(FocusWindows.current_win, "number", true)
	vim.api.nvim_win_set_option(FocusWindows.current_win, "relativenumber", true)

	Flags.run = false
end

function FocusModeStop()
	if Flags.run then
		return
	end
	print("Exiting focus mode")

	Flags.stop = true
	vim.g.focusMode = false

	if FocusWindows.marginLeft and vim.api.nvim_win_is_valid(FocusWindows.marginLeft) then
		vim.api.nvim_win_close(FocusWindows.marginLeft, true)
	end
	if FocusWindows.marginRight and vim.api.nvim_win_is_valid(FocusWindows.marginRight) then
		vim.api.nvim_win_close(FocusWindows.marginRight, true)
	end
	Flags.stop = false
end

function FocusModeUpdate()
	if Flags.run or Flags.stop or Flags.update or Flags.scheduledRunning then
		return
	end

	Flags.update = true

	local total_width = vim.o.columns
	local current_win_width = vim.g.focusModeSize or 80
	local margin = math.floor((total_width - current_win_width) / 2)
	local win_list = {}

	if total_width > current_win_width then
		-- Close all other windows except the current one and margins
		local windows = vim.api.nvim_list_wins()
		for _, win in ipairs(windows) do
			if
				win ~= FocusWindows.current_win
				and win ~= FocusWindows.marginLeft
				and win ~= FocusWindows.marginRight
			then
				if vim.api.nvim_win_is_valid(win) then
					vim.api.nvim_win_close(win, true)
				end
			end
		end

		-- Schedule window creation and resizing after closing is done
		local currentWinValid = vim.api.nvim_win_is_valid(FocusWindows.current_win)
		local marginLeftValid = vim.api.nvim_win_is_valid(FocusWindows.marginLeft)
		local marginRightValid = vim.api.nvim_win_is_valid(FocusWindows.marginRight)

		if not currentWinValid or not marginLeftValid or not marginRightValid then
			vim.schedule(function()
				Flags.scheduledRunning = true
				-- Open margin windows if they are not valid
				if not marginLeftValid then
					FocusWindows.marginLeft = vim.api.nvim_open_win(FocusWindows.EmptyBuffer, false, { split = "left" })
				end
				if not marginRightValid then
					FocusWindows.marginRight =
						vim.api.nvim_open_win(FocusWindows.EmptyBuffer, false, { split = "right" })
				end
				if not currentWinValid then
					print("Opening current window")
					vim.api.nvim_set_current_win(FocusWindows.marginLeft)
					FocusWindows.current_win =
						vim.api.nvim_open_win(FocusWindows.current_buf, false, { split = "right" })
				end

				Flags.scheduledRunning = false
			end)
		end

		if not Flags.scheduledRunning and currentWinValid and marginLeftValid and marginRightValid then
			-- Resize the windows
			vim.api.nvim_win_set_width(FocusWindows.marginLeft, margin)
			vim.api.nvim_win_set_width(FocusWindows.marginRight, margin)
			vim.api.nvim_win_set_width(FocusWindows.current_win, current_win_width)

			-- Set focus on the current window after layout changes
			vim.api.nvim_set_current_win(FocusWindows.current_win)
			FocusWindows.current_buf = vim.api.nvim_get_current_buf()
		end
	else
		-- When total_width is less than or equal to current_win_width, close all except current
		local windows = vim.api.nvim_list_wins()
		for _, win in ipairs(windows) do
			if win ~= FocusWindows.current_win then
				if vim.api.nvim_win_is_valid(win) then
					vim.api.nvim_win_close(win, true)
				end
			end
		end

		local currentWinValid = vim.api.nvim_win_is_valid(FocusWindows.current_win)
		if not currentWinValid then
			vim.schedule(function()
				Flags.scheduledRunning = true
				if not currentWinValid then
					print("Opening current window")
					FocusWindows.current_win =
						vim.api.nvim_open_win(FocusWindows.current_buf, false, { split = "right" })
				end

				Flags.scheduledRunning = false
			end)
			if not Flags.scheduledRunning and currentWinValid then
				-- Resize the current window
				vim.api.nvim_win_set_width(FocusWindows.current_win, current_win_width)
				vim.api.nvim_set_current_win(FocusWindows.current_win)
				FocusWindows.current_buf = vim.api.nvim_get_current_buf()
			end
		end
	end
	Flags.update = false
end

vim.api.nvim_create_user_command("FocusMode", function()
	if vim.g.DiaryMode then
		print("Diary Mode is running, please disable it before using Focus Mode")
		return
	end
	vim.g.focusMode = not vim.g.focusMode
	if vim.g.focusMode then
		FocusModeRun()
	else
		FocusModeStop()
	end
end, {})

vim.api.nvim_create_user_command("FocusModeSize", function(opts)
	vim.g.focusModeSize = tonumber(opts.args) or 80
	if vim.g.focusMode then
		FocusModeUpdate()
	end
end, { nargs = 1 })

vim.api.nvim_create_autocmd({ "WinResized", "WinEnter", "WinNew", "BufEnter" }, {
	callback = function()
		if vim.g.focusMode then
			FocusModeUpdate()
		end
	end,
})

local keymap = vim.keymap.set
keymap("n", "ƒç", "<cmd>FocusMode<cr>", { silent = true, noremap = true })
